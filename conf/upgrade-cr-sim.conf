[DEFAULT]
# total simulation time, in hours, default is 10 years = 87600 hours
total_time = 87600

# raw data which stored in the system, in PB
total_active_storage = 1

# rack amount can be computed by all these data. Chunk size in MBs.
# If not given, datacenter amount will be 1.
chunk_size = 256
disk_capacity = 2
disks_per_machine = 10
machines_per_rack = 5
rack_count = 24
# datacenters = 1

# sss, pss, copyset, hdfs, drc, ...
data_placement = sss

data_redundancy = RS_14_10

# if event_file is not empty, events generated will be printed to file
event_file = /root/CR-SIM/log/event

# bandwidth_efficient_scheme = false
# bandwidth in MB/hr
recovery_bandwidth_gap = 25000000 
installment_size = 1000
availability_counts_for_recovery = false

# Output contents
outputs = DL,UNA,RB

# parallel repair flag
paralllel_repair = true

# 'true' means use lazy recovery during data recovery.
lazy_recovery = false
# 'true' means use RAFI recovery during data recovery.
rafi_recovery = false

# 'true' means there are more than one data redundancy schemes in the system, 'false' means only one
heterogeneous_redundancy = false
# 'true' means heterogeneous redundancy in all layers 
heterogeneous_medium = false

system_scaling = false
system_upgrade = true
correlated_failures = false
block_failure = false

[Heterogeneous Redundancy]
first_redundancy = RS_3_1
second_redundancy = RS_14_10

# size: replication for small files, erasure codes for big files
# hotness: replication for hot files, erasure codes for cold files
# hb: maintains 'rep + ec' at the same time
hr_policy = hotness

file_size_distribution = /root/CR-SIM/file_size_distribution
hotness_prob = 0.08

[Heterogeneous Medium]
mediums = SSD,HDD
# data redundancy for each layer, format: [first_redundancy, second_redundancy],
# colon as the separator for different layers
# redundancies = (RS_3_1,RS_n_k) : (RS_n_k,LRC_n_k_l)
redundancies = (RS_3_1,RS_14_10) : (RS_14_10,LRC_16_10)
transform_policy = hotness


# Rolling update
[System Upgrade 1]
upgrade_start = 10000
# how many machines for each upgrade operator?
upgrade_concurrence = 10
# time interval between two upgrade operators
upgrade_interval = 0
# downtime in hours
downtime = 4

[System Upgrade 2]
upgrade_start = 20000
upgrade_concurrence = 10
upgrade_interval = 0
downtime = 4

[System Upgrade 3]
upgrade_start = 30000
upgrade_concurrence = 10
upgrade_interval = 0
downtime = 4

[System Upgrade 4]
upgrade_start = 40000
upgrade_concurrence = 10
upgrade_interval = 0
downtime = 4


[System Upgrade 5]
upgrade_start = 50000
upgrade_concurrence = 10
upgrade_interval = 0
downtime = 4

[System Upgrade 6]
upgrade_start = 60000
upgrade_concurrence = 10
upgrade_interval = 0
downtime = 4


[System Upgrade 7]
upgrade_start = 70000
upgrade_concurrence = 10
upgrade_interval = 0
downtime = 4


[System Upgrade 8]
upgrade_start = 80000
upgrade_concurrence = 10
upgrade_interval = 0
downtime = 4
